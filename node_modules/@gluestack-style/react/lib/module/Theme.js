function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { View } from 'react-native';
import * as React from 'react';
export const defaultConfig = {
  theme: undefined
};
const defaultContextData = defaultConfig;
const ThemeContext = /*#__PURE__*/React.createContext(defaultContextData);
// Can be discussed should we provide flex 1 by default or not.

export const Theme = _ref => {
  let {
    children,
    name,
    ...props
  } = _ref;
  const contextValue = React.useMemo(() => {
    return {
      theme: name
    };
  }, [name]);
  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/React.createElement(View, _extends({
    dataSet: {
      'theme-id': name
    }
  }, props), children));
};
// Theme.displayName = 'Theme';

export const useTheme = () => React.useContext(ThemeContext);
//# sourceMappingURL=Theme.js.map